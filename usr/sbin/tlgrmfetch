#! /bin/sh
#set -x
#
# automagic download of latest Telegram
#
# Copyright (C) 2015 by Paul Seelig <wmlive@rumbero.org>

# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.

# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.

# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

LANG=C

help ()
{
FETCHSCRIPT="$(which ${0})"
echo ""
echo "# Command line options are:"
echo ""
grep "()"$ ${FETCHSCRIPT} | cut -d " " -f1 | grep -v ^help
echo ""
echo "# To fetch either 32bit or 64bit version use:"
echo ""
echo "linux-i686"
echo "linux-x86_64"
echo ""
}

if [ "${1}" = "help" ]
then
   $1
   exit 0
fi

GXMSG="/usr/bin/gxmessage -center -wrap -name $(basename "${0}")"

if [ "$(/usr/bin/id -u)" != "0" ]
then
    if [ -x /usr/bin/gxmessage ] && [ "${DISPLAY}" != "" ]
    then
        ${GXMSG} -buttons "" -title "Sorry, only root can do this" -file - << EOFSORRY

	Installation of third party software requires root permissions
	or explicit membership in the sudo group for authorized users.
EOFSORRY
        exit 0
    else
        echo "Sorry, only root or authorized users can do this"
        exit 0
    fi
fi

if [ ! -x /usr/bin/wget ]
then
  echo This script requires /usr/bin/wget to be installed.
  echo Install it first with \'apt-get -u -m install wget\'.
  exit 0
fi

PROGENVDEFAULTS=/etc/default/progfetch

if [ -s "${PROGENVDEFAULTS}" ]
then
   . "${PROGENVDEFAULTS}"
else
   echo No defaults file "${PROGENVDEFAULTS}" found
fi

if [ "$(uname -m)" = "x86_64" ]
then
    CPUTYPE="x86_64"
else
    CPUTYPE="i686"
fi

case "$1" in
    linux-i686)
        PROGARCH=linux-i686
        ;;
    linux-x86_64)
        PROGARCH=linux-x86_64
        ;;
    *)
        PROGARCH=linux-${CPUTYPE}
        ;;
esac

PROGVERSION=$(wget -O - https://desktop.telegram.org/changelog 2>/dev/null | grep -i -m 1 -o 'v [0-9].[0-9].[0-9][^*]' | awk '{print $2}')

version_check ()
{
echo "${PROGVERSION}"
}

if [ "${PROGARCH}" = "linux-i686" ]
then
  PROGVARIANT=tsetup32
  PROGARCHIVE="${PROGVARIANT}.${PROGVERSION}".tar.xz
  PROGSITEURL=https://updates.tdesktop.com/tlinux32
elif [ "${PROGARCH}" = "linux-x86_64" ]
then
  PROGVARIANT=tsetup
  PROGARCHIVE="${PROGVARIANT}.${PROGVERSION}".tar.xz
  PROGSITEURL=https://updates.tdesktop.com/tlinux
fi

if [ "${PROGVERSION}" != "" ]
then
   PROGLANG=en-US
   PROGWORKDIR=/opt
   PROGDIR="${PROGWORKDIR}"/Telegram
   PROGFETCHDIR="${PROGWORKDIR}"/"${PROGARCH}"/telegram
   PROGBINURL="${PROGSITEURL}"/"${PROGARCHIVE}"
   PROGSETUP="${PROGFETCHDIR}"/"${PROGARCHIVE}"
   PROGBINARY="${PROGDIR}"/Telegram
   WGETCMD="wget --progress=dot -c"
else
   echo "Unable to check latest release version."
   NONETWORK="1"
fi

if [ ! -d "${PROGFETCHDIR}" ]
then
  mkdir -p "${PROGFETCHDIR}"
fi

check_integrity ()
{
if [ "${PROGVERSION}" != "" ]
then
    echo Verifying integrity of "${PROGARCHIVE}" ...
    XZINTEGRITY="$(tar tJf "${PROGSETUP}" > /dev/null 2>&1; echo $?)"
    if [ "$XZINTEGRITY" != "0" ]
    then
	echo Continuing incomplete "${PROGARCHIVE}" download...
	cd "${PROGFETCHDIR}" && ${WGETCMD} "${PROGBINURL}" 
    else
	echo Telegram "${PROGVERSION}" download is complete.
    fi
fi
}

cleanup ()
{
if [ -d "${PROGFETCHDIR}" ]
then
    cd "${PROGFETCHDIR}" && \
    if [ "$(echo tsetup*.*.tar.xz | wc -w)" -gt "1" ]
    then
        echo Removing obsolete "${PROGVARIANT}" download archives:
        for PROGTARXZ in $(find . -name "${PROGVARIANT}*.tar.xz" | awk -F / '{print $2}')
        do  
            if [ "${PROGTARXZ}" != "${PROGARCHIVE}" ]
            then
                rm -vf "${PROGTARXZ}"
            else
                echo Keeping latest "${PROGVARIANT}" version "${PROGVERSION}"
            fi
        done
    echo ""
    fi
fi
}

replace_install ()
{
if [ ! -f "${PROGDIR}"/installed ] || [ "$(grep -c "${PROGARCHIVE}" "${PROGDIR}"/installed)" != "1" ]
then
  check_integrity
  if [ "$KEEPOLDRELEASE" = "yes" ] && [ -x "${PROGBINARY}" ]
  then
     mv -v "${PROGBINARY}" ${PROGBINARY}_old
  else
     rm -f "${PROGBINARY}" ${PROGBINARY}_old
  fi
  cd "${PROGWORKDIR}" && tar xJf "${PROGSETUP}" Telegram/Telegram && \
     chown root:root "${PROGBINARY}" && echo "${PROGSETUP}" > "${PROGDIR}"/installed
  echo Latest Telegram "${PROGVERSION}" has been installed.
else
  echo Latest Telegram "${PROGVERSION}" is already installed.
fi
# make sure a symlink in path points to the Telegram binary
[ -L /usr/bin/telegram ] || ln -s /opt/Telegram/Telegram /usr/bin/telegram
}

prog_fetch ()
{
if [ "${PROGARCH}" = "linux-${CPUTYPE}" ]
then
    cd "${PROGFETCHDIR}" && \
    if [ "${PROGVERSION}" != "" ] && [ -s "${PROGSETUP}" ]
    then
      replace_install
    elif [ ! -s "${PROGSETUP}" ]
    then
      ${WGETCMD} "${PROGBINURL}"
      replace_install
    fi
elif [ "${PROGARCH}" != "linux-${CPUTYPE}" ]
then
    cd "${PROGFETCHDIR}" && \
    if [ "${PROGVERSION}" != "" ] && [ -s "${PROGSETUP}" ]
    then
      check_integrity
    elif [ ! -s "${PROGSETUP}" ]
    then
      ${WGETCMD} "${PROGBINURL}"
      check_integrity
    fi
fi
}

if [ "${#}" != "0" ] && [ "$1" != "${PROGARCH}" ]
then
   $1
elif [ "$1" = "${PROGARCH}" ]
then
   prog_fetch
   cleanup
elif [ "${NONETWORK}" != "" ] && [ "$1" != "${PROGARCH}" ]
then
   echo "Is the network down?"
else
   prog_fetch
   cleanup
fi

# keep terminal window open to make command output visible:

if [ "${DISPLAY}" != "" ] && [ "$(ps -ef | grep -c "[t]erm --title=$(basename "${0}")")" != "0" ]
then
    sleep 5
fi

