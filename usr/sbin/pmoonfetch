#!/bin/sh
#set -x
#
# automagic download of latest palemoon
#
# Copyright (C) 2011 by Paul Seelig <wmlive@rumbero.org>

# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.

# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.

# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

LANG=C

help ()
{
FETCHSCRIPT="$(which ${0})"
echo ""
echo "# Command line options are:"
echo ""
grep "()"$ ${FETCHSCRIPT} | cut -d " " -f1 | grep -v ^help
echo ""
echo "# To fetch either 32bit or 64bit version use:"
echo ""
echo "linux-i686"
echo "linux-x86_64"
echo ""
}

if [ "${1}" = "help" ]
then
   "${1}"
   exit 0
fi

GXMSG="/usr/bin/gxmessage -center -wrap -name $(basename "${0}")"

if [ "$(/usr/bin/id -u)" != "0" ]
then
    if [ -x /usr/bin/gxmessage ] && [ "${DISPLAY}" != "" ]
    then
        ${GXMSG} -buttons "" -title "Sorry, only root can do this" -file - << EOFSORRY

	Installation of third party software requires root permissions
	or explicit membership in the sudo group for authorized users.
EOFSORRY
        exit 0
    else
        echo "Sorry, only root or authorized users can do this"
        exit 0
    fi
fi

if [ ! -x /usr/bin/wget ]
then
  echo This script requires /usr/bin/wget to be installed.
  echo Install it first with \'apt-get -u -m install wget\'.
  exit 0
fi

PROGENVDEFAULTS=/etc/default/progfetch

if [ -s "${PROGENVDEFAULTS}" ]
then
   . "${PROGENVDEFAULTS}"
fi

PROGVARIANT=palemoon

LATESTVER="$(wget -O - http://linux.palemoon.org/installer/latest.php 2>/dev/null | awk '{print $1}')"
#PROGMIRROR="http://linux.palemoon.org/files/${LATESTVER}"
PROGMIRROR="http://linux.palemoon.org/datastore/release"

PROGLANG=en-US
SYSENVLANG=$(grep ^LANG= /etc/default/locale | tr -d \" | cut -d= -f2 | cut -d. -f1)
LANGSTOFETCH="$(echo "${SYSENVLANG}" | cut -d_ -f1) $(echo "${SYSENVLANG}" | tr _ -) ${SYSENVLANG} ${EXTRALANGS}"
SYSLOCALE="$(echo "${SYSENVLANG}" | cut -d_ -f1) $(echo "${SYSENVLANG}" | tr _ -) $(echo "${SYSENVLANG}" | tr - _)"

PROGWORKDIR=/opt

if [ "$(uname -m)" = "x86_64" ]
then
    CPUTYPE="x86_64"
else
    CPUTYPE="i686"
fi

case "$1" in
    linux-i686)
        PROGARCH=linux-i686
        ;;
    linux-x86_64)
        PROGARCH=linux-x86_64
        ;;
    *)
        PROGARCH=linux-${CPUTYPE}
        ;;
esac

PROGAPPINI=${PROGWORKDIR}/${PROGVARIANT}/application.ini

if [ -s ${PROGAPPINI} ]
then
   export CURRENTVER=$(grep ^Version ${PROGAPPINI} | cut -d= -f2)
else
   export CURRENTVER=""
fi

version_check ()
{
if [ "${CURRENTVER}" != "" ]
then
   echo "Currently installed ${PROGVARIANT} is ${CURRENTVER}"
else
   echo "No prior ${PROGVARIANT} installation found."
fi
if [ "${LATESTVER}" != "" ] && [ "${LATESTVER}" = "${CURRENTVER}" ]
then
   echo "Latest ${PROGVARIANT} ${LATESTVER} is already installed"
elif [ "${LATESTVER}" != "${CURRENTVER}" ]
then
   echo "More recent version ${LATESTVER} is available."
fi
}

if [ "${LATESTVER}" != "" ]
then
   LATESTPROG="${PROGVARIANT}-${LATESTVER}.${PROGLANG}.${PROGARCH}".tar.bz2
   LANGVERSION=$(echo "${LATESTVER}" | awk -F . '{print $1"."$2}')

   WGETCMD="wget -c --no-http-keep-alive --no-remove-listing --progress=dot"
   PROGDOWNLOAD="${PROGMIRROR}/${LATESTPROG}"

   PROGTARGETDIR=${PROGWORKDIR}/${PROGARCH}/${PROGVARIANT}

   if [ ! -d "${PROGTARGETDIR}" ]
   then
      mkdir -p "${PROGTARGETDIR}"
   fi

   LANGPACKDIR="${PROGTARGETDIR}"/langpacks

   if [ ! -d "${LANGPACKDIR}" ]
   then
      mkdir -p "${LANGPACKDIR}"
   fi

   EXTENSIONDIR="${PROGWORKDIR}/${PROGVARIANT}/browser/extensions"

   LANGPACKURIS="http://addons.palemoon.org/language-packs"
   PROGLINGUAS="${LANGPACKDIR}/langpacklist"
   wget -O - ${LANGPACKURIS} 2>/dev/null | grep "rm-eu.palemoon.org/langpacks" | grep -o 'http://[^"]*' > "${PROGLINGUAS}"

   LANGMIRROR="$(grep "rm-eu.palemoon.org/langpacks" "${PROGLINGUAS}" | cut -d\" -f2 | cut -d/ -f1-5 | head -n 1)"
   LANGPACKS="${LANGPACKDIR}"/${LANGVERSION}
elif [ "${LATESTVER}" = "" ] && [ "${CURRENTVER}" != "" ]
then
   version_check
   echo "Unable to check latest release version."
   PROGTARGETDIR=${PROGWORKDIR}/${PROGARCH}/${PROGVARIANT}
   LANGPACKDIR="${PROGTARGETDIR}"/langpacks
   PROGLINGUAS="${LANGPACKDIR}/langpacklist"
   LANGVERSION=$(echo ${CURRENTVER} | awk -F . '{print $1"."$2}')
   LANGPACKS="${LANGPACKDIR}"/${LANGVERSION}
   EXTENSIONDIR="${PROGWORKDIR}/${PROGVARIANT}/browser/extensions"
   LATESTVER="${CURRENTVER}"
   NONETWORK="1"
else
   version_check
   echo "Unable to check latest release version."
   NONETWORK="1"
fi

cleanup ()
{
if [ -d "${PROGTARGETDIR}" ]
then
    cd "${PROGTARGETDIR}" && \
    if [ "$(find . -name "${PROGVARIANT}*.tar.bz2" 2>/dev/null | wc -w)" -gt "1" ]
        then
        echo Clean up from obsolete download archives:
        for BZPROGTAR in $(find . -name "${PROGVARIANT}*.tar.bz2" | awk -F / '{print $2}')
        do
            if [ "${BZPROGTAR}" != "${LATESTPROG}" ]
            then
               rm -vf "$(basename "${BZPROGTAR}" .bz2)".*
            fi
        done
        echo ""
    fi
fi
if [ -d "${LANGPACKDIR}" ]
then
    cd "${LANGPACKDIR}" && \
    if [ "$(find . -depth -type d | grep -cv 'a-zA-Z')" -gt "2" ]
    then
        echo Removing obsolete ${PROGVARIANT} language packs:
        for LANGDIR in $(find . -type d | grep -v 'a-zA-Z' | awk -F / '{print $2}' | grep -v ^$)
        do
            if [ "${LANGDIR}" != "${LANGVERSION}" ]
            then
                rm -vrf "${LANGDIR}"
            else
                echo Keeping latest "${PROGVARIANT}" version "${LATESTVER}" language pack.
            fi
        done
        echo ""
    fi
fi
}

check_integrity ()
{
echo Verifying download "${LATESTPROG}" integrity...
cd "${PROGTARGETDIR}" && \
BZINTEGRITY="$(tar tjf "${LATESTPROG}" > /dev/null 2>&1; echo $?)"
if [ "${BZINTEGRITY}" != "0" ] && [ "${NONETWORK}" = "" ] 
then
    echo Continuing incomplete ${PROGVARIANT} download...
    echo ""
    cd "${PROGTARGETDIR}" && \
    ${WGETCMD} "${PROGDOWNLOAD}"
elif [ "${NONETWORK}" != "" ]
then
    echo Download is still incomplete
    echo Network unreachable, cannot continue
    STILLINCOMPLETE=yes
else
    echo "Download of ${PROGARCH} version complete."
fi
}

replace_install ()
{
check_integrity && \
if [ "${STILLINCOMPLETE}" != "yes" ]
then
    cd "${PROGWORKDIR}" && \
    [ -d "${PROGVARIANT}"_old ] && rm -rf "${PROGVARIANT}"_old
    if [ "$KEEPOLDRELEASE" = "yes" ] && [ -d "${PROGVARIANT}" ]
    then
        echo Replacing ${PROGWORKDIR}/${PROGVARIANT} with new version
        mv "${PROGVARIANT}" "${PROGVARIANT}"_old
    else
       rm -rf "${PROGVARIANT}"
    fi
        if [ -s "${PROGTARGETDIR}/${LATESTPROG}" ]
    then
        tar xjf "${PROGTARGETDIR}/${LATESTPROG}"
    fi
else
    echo No valid install files found
fi
}

fetchprog ()
{
if [ -d "${PROGTARGETDIR}" ]
then
    if [ "${PROGARCH}" = "linux-${CPUTYPE}" ]
    then
        cd "${PROGTARGETDIR}" && \
        version_check
        if [ "${LATESTVER}" != "${CURRENTVER}" ]
        then
            echo "Latest release version is ${LATESTVER}"
            if [ -s "${LATESTPROG}" ]
            then
                check_integrity
            else
                echo "Downloading ${PROGLANG} ${PROGVARIANT} update ${LATESTVER}"
                cd "${PROGTARGETDIR}" && \
                ${WGETCMD} "${PROGDOWNLOAD}"
                check_integrity
            fi
            replace_install 
        fi
    elif [ "${PROGARCH}" != "linux-${CPUTYPE}" ]
    then
        cd "${PROGTARGETDIR}" && \
        if [ "${LATESTVER}" != "" ] && [ "${PROGARCH}" != "" ]
        then
           echo "Latest release version is ${LATESTVER}"
           if [ -s "${LATESTPROG}" ]
           then
               check_integrity
           else
               echo "Downloading ${PROGARCH} ${PROGVARIANT} version ${LATESTVER}"
               ${WGETCMD} "${PROGDOWNLOAD}"
               check_integrity
           fi
        fi
    fi
fi
}

extralocales ()
{
if [ -d "${PROGTARGETDIR}" ] && [ ! -d "${LANGPACKS}" ]
then
  mkdir -p "${LANGPACKS}"
elif [ "${LANGPACKS}" != "" ] && [ -d "${LANGPACKS}" ]
then
    cd "${LANGPACKS}" && \
    for XPI in ${LANGSTOFETCH}
    do
        XPIFILE=langpack-"${XPI}@${PROGVARIANT}".org.xpi
	if [ "${XPIFILE}" != "" ] && [ -s "${PROGLINGUAS}" ] && [ "$(grep -c "${XPI}".xpi$ "${PROGLINGUAS}")" != "0" ]
	then
	    [ ! -s "${XPIFILE}" ] && ${WGETCMD} "${LANGMIRROR}/${XPI}".xpi -O "${XPIFILE}"
	fi
	[ "${XPIFILE}" != "" ] && [ -s "${XPIFILE}" ] && TARGETXPI=$(unzip -c "${XPIFILE}" | grep em:id= | awk -F\" '{print $2}').xpi
	if [ "${TARGETXPI}" != "" ] && [ "${EXTENSIONDIR}" != "" ] && [ ! -s "${EXTENSIONDIR}/${TARGETXPI}" ]
	then
	    echo Installing extension "${TARGETXPI}" 
	    cp -v "${XPIFILE}" "${EXTENSIONDIR}/${TARGETXPI}"
	fi
    done
fi
}

getlangpacks ()
{
if [ -d "${PROGTARGETDIR}" ] && [ ! -d "${LANGPACKS}" ]
then
    mkdir -p "${LANGPACKS}"
elif [ "${LANGPACKS}" != "" ] && [ -d "${LANGPACKS}" ]
then
    cd "${LANGPACKS}" && \
    awk -F / '{print $6}' "${PROGLINGUAS}" | awk -F\. '{print $1}' | \
    while read XPI
    do
        XPIFILE=langpack-"${XPI}@${PROGVARIANT}".org.xpi
        if [ "${XPIFILE}" != "" ] && [ -s "${PROGLINGUAS}" ] && [ "$(grep -c "${XPI}".xpi "${PROGLINGUAS}")" != "0" ]
        then
            [ ! -s "${XPIFILE}" ] && ${WGETCMD} "${LANGMIRROR}/${XPI}".xpi -O "${XPIFILE}"
        fi

        [ "${XPIFILE}" != "" ] && [ -s "${XPIFILE}" ] && TARGETXPI=$(unzip -c "${XPIFILE}" | grep em:id= | awk -F\" '{print $2}').xpi
        if [ "${TARGETXPI}" != "" ] && [ "${EXTENSIONDIR}" != "" ] && [ "${XPIFILE}" != "${TARGETXPI}" ]
        then
            echo Renaming "${XPIFILE}" to "${TARGETXPI}" 
            mv -v "${XPIFILE}" "${TARGETXPI}" 
        fi
    done
fi
}

syslocale ()
{
if [ -d "${PROGTARGETDIR}" ] && [ ! -d "${LANGPACKS}" ]
then
  mkdir -p "${LANGPACKS}"
elif [ "${LANGPACKS}" != "" ] && [ -d "${LANGPACKS}" ]
then
    cd "${LANGPACKS}" && \
    for XPI in ${SYSLOCALE}
    do
        XPIFILE=langpack-"${XPI}@${PROGVARIANT}".org.xpi
	if [ "${XPIFILE}" != "" ] && [ -s "${PROGLINGUAS}" ] && [ "$(grep -c "${XPI}".xpi$ "${PROGLINGUAS}")" != "0" ]
	then
	    [ ! -s "${XPIFILE}" ] && ${WGETCMD} "${LANGMIRROR}/${XPI}".xpi -O "${XPIFILE}"
	fi
	[ "${XPIFILE}" != "" ] && [ -s "${XPIFILE}" ] && TARGETXPI=$(unzip -c "${XPIFILE}" | grep em:id= | awk -F\" '{print $2}').xpi
	if [ "${TARGETXPI}" != "" ] && [ "${EXTENSIONDIR}" != "" ] && [ ! -s "${EXTENSIONDIR}/${TARGETXPI}" ]
	then
	    echo Installing extension "${TARGETXPI}" 
	    cp -v "${XPIFILE}" "${EXTENSIONDIR}/${TARGETXPI}"
	fi
    done
fi
}

if [ "${#}" != "0" ] && [ "${1}" != "${PROGARCH}" ]
then
   "${1}"
elif [ "${NONETWORK}" != "" ]  && [ "${CURRENTVER}" != "" ]
then
   syslocale
   echo "Is the network down?"
elif [ "${NONETWORK}" = "" ] && [ "${1}" = "${PROGARCH}" ]
then
   fetchprog
   cleanup
elif [ "${NONETWORK}" = "" ] && [ "${1}" != "${PROGARCH}" ]
then
   fetchprog
   syslocale
   cleanup
else
   echo "Is the network down?"
fi

# keep terminal window open to make command output visible:

if [ "${DISPLAY}" != "" ] && [ "$(ps -ef | grep -c "[t]erm --title=$(basename "${0}")")" != "0" ]
then
    sleep 5
fi
